/*
 Part of the Nerduino IOT project - http://nerduino.com

 Copyright (c) 2013 Chase Laurendine

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package processing.app;

import java.io.File;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

public class SketchConfigDialog extends javax.swing.JDialog
{
	public Sketch m_sketch;
	Sketch m_selectedSketch;
	
	/** Creates new form SketchConfigDialog */
	public SketchConfigDialog(java.awt.Frame parent, boolean modal)
	{
		super(parent, modal);
		initComponents();
		fillTree();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings({"unchecked", "deprecation"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeClone = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(SketchConfigDialog.class, "SketchConfigDialog.jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        txtName.setName("txtName"); // NOI18N

        btnOk.setLabel(org.openide.util.NbBundle.getMessage(SketchConfigDialog.class, "SketchConfigDialog.btnOk.label")); // NOI18N
        btnOk.setName("btnOk"); // NOI18N
        btnOk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOkMouseClicked(evt);
            }
        });
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnCancel.setLabel(org.openide.util.NbBundle.getMessage(SketchConfigDialog.class, "SketchConfigDialog.btnCancel.label")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelMouseClicked(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(SketchConfigDialog.class, "SketchConfigDialog.jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        treeClone.setName("treeClone"); // NOI18N
        treeClone.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                onSelectionChanged(evt);
            }
        });
        jScrollPane1.setViewportView(treeClone);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 292, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))))
                    .add(layout.createSequentialGroup()
                        .add(116, 116, 116)
                        .add(btnOk)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(txtName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 246, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnCancel)
                    .add(btnOk))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnOkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOkMouseClicked
	// apply the values
	if (m_sketch != null)
	{
		String newname = txtName.getText();
		
		if (newname.length() == 0)
			return;
		
		m_sketch.setName(txtName.getText());

		// if an clone project was specified, then clone the project
		if (m_selectedSketch != null)
			m_sketch.cloneSketch(m_selectedSketch);
		else
		{
			JOptionPane.showMessageDialog(null, "Please select a sketch to clone!");
			
			return;
		}
		
		m_sketch.showTopComponent();
	}
	
	setVisible(false);
}//GEN-LAST:event_btnOkMouseClicked

private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_btnOkActionPerformed

private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked

	m_sketch = null;
	
	setVisible(false);
}//GEN-LAST:event_btnCancelMouseClicked

private void onSelectionChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_onSelectionChanged
	DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeClone.getLastSelectedPathComponent();

    if (node != null && node.isLeaf())
	{
	    Object nodeInfo = node.getUserObject();

		if (nodeInfo != null)
		{
			m_selectedSketch = (Sketch)nodeInfo;
			
			return;
		}
    }
	
	m_selectedSketch = null;
}//GEN-LAST:event_onSelectionChanged

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		}
		catch(ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(SketchConfigDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch(InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(SketchConfigDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch(IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(SketchConfigDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch(javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(SketchConfigDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				SketchConfigDialog dialog = new SketchConfigDialog(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter()
				{
					@Override
					public void windowClosing(java.awt.event.WindowEvent e)
					{
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree treeClone;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

	void setSketch(Sketch sketch)
	{
		m_sketch = sketch;
	}
	
	void fillTree()
	{
		
		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Sketchbook");
		
		DefaultTreeModel model = new DefaultTreeModel(root);
		
		DefaultMutableTreeNode sketchbook = new DefaultMutableTreeNode("Sketchbook");
		DefaultMutableTreeNode examples = new DefaultMutableTreeNode("Examples");
		DefaultMutableTreeNode library = new DefaultMutableTreeNode("Library Examples");
		
		root.add(sketchbook);
		root.add(examples);
		root.add(library);
		
		String path = ArduinoManager.Current.getArduinoPath();
		
		fillTree(path, sketchbook);
		
		fillTree(path + "/Source/Arduino/build/shared/examples", examples);
		fillTree(path + "/Source/Arduino/libraries", library);
		
		treeClone.setModel(model);
		
		treeClone.setShowsRootHandles(true);
		treeClone.setRootVisible(false);
	}
	
	void fillTree(String path, DefaultMutableTreeNode parent)
	{
		File f = new File(path);
		
		File[] files = f.listFiles();
		
		for(File ff : files)
		{
			if (ff.isDirectory())
			{
				if (!ff.getName().equalsIgnoreCase("source"))
				{
					boolean found = false;
					boolean subdirectoryfound = false;
					
					// look to see if this directory contains a file with a pde or ino extension
					File[] list = ff.listFiles();
					
					for(File l : list)
					{
						if (l.isDirectory())
						{
							subdirectoryfound = true;
						}
						else
						{
							String name = l.getName();

							if (name.endsWith(".pde") || name.endsWith(".ino"))
							{
								try
								{
									Sketch sw = new Sketch(l.getPath()); //ff.getName());
									sw.setSketchPath(ff.getAbsolutePath());

									DefaultMutableTreeNode node = new DefaultMutableTreeNode(name); //ff.getName());

									node.setUserObject(sw);

									parent.add(node);

									found = true;

									break;
								}
								catch(IOException ex)
								{
//									Exceptions.printStackTrace(ex);
								}
							}
						}
					}
					
					if (!found && subdirectoryfound)
					{
						// recurse into the directory
						DefaultMutableTreeNode node = new DefaultMutableTreeNode(ff.getName());
						
						parent.add(node);
						
						fillTree(ff.getAbsolutePath(), node);
					}
				}
			}
		}			
	}
}
