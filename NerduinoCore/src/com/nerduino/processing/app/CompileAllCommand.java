package com.nerduino.processing.app;

import com.nerduino.library.NerduinoBase;
import com.nerduino.library.NerduinoManager;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;

public class CompileAllCommand extends java.awt.Panel implements ICompileCallback, IBuildTask
{
	Sketch m_sketch;
	
	boolean m_success = false;
	int m_errors = 0;
	CompileAllCommand m_command;
	boolean m_busy = false;

	public CompileAllCommand(Sketch sketch)
	{
		initComponents();
		
		m_sketch = sketch;
		m_command = this;
		
		jProgressBar1.setVisible(false);
	}

	@Override
	public void validate()
	{
		super.validate();
		
		jProgressBar1.setSize(this.getWidth(), 18);
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        compileButton = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        setMaximumSize(new java.awt.Dimension(2147483647, 22));
        setMinimumSize(new java.awt.Dimension(16, 22));
        setPreferredSize(new java.awt.Dimension(60, 22));
        setSize(new java.awt.Dimension(60, 22));
        setLayout(null);

        compileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nerduino/resources/Check16.png"))); // NOI18N
        compileButton.setToolTipText(org.openide.util.NbBundle.getMessage(CompileAllCommand.class, "CompileAllCommand.compileButton.toolTipText")); // NOI18N
        compileButton.setBorderPainted(false);
        compileButton.setContentAreaFilled(false);
        compileButton.setIconTextGap(0);
        compileButton.setLabel(org.openide.util.NbBundle.getMessage(CompileAllCommand.class, "CompileAllCommand.compileButton.label")); // NOI18N
        compileButton.setMaximumSize(new java.awt.Dimension(18, 18));
        compileButton.setMinimumSize(new java.awt.Dimension(18, 18));
        compileButton.setPreferredSize(new java.awt.Dimension(18, 18));
        compileButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                OnCompileAction(evt);
            }
        });
        add(compileButton);
        compileButton.setBounds(0, 0, 20, 18);

        uploadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nerduino/resources/UploadAll16.png"))); // NOI18N
        uploadButton.setToolTipText(org.openide.util.NbBundle.getMessage(CompileAllCommand.class, "CompileAllCommand.uploadButton.toolTipText")); // NOI18N
        uploadButton.setBorderPainted(false);
        uploadButton.setContentAreaFilled(false);
        uploadButton.setIconTextGap(0);
        uploadButton.setLabel(org.openide.util.NbBundle.getMessage(CompileAllCommand.class, "CompileAllCommand.uploadButton.label")); // NOI18N
        uploadButton.setMaximumSize(new java.awt.Dimension(18, 18));
        uploadButton.setMinimumSize(new java.awt.Dimension(18, 18));
        uploadButton.setPreferredSize(new java.awt.Dimension(18, 18));
        uploadButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                OnUploadAction(evt);
            }
        });
        add(uploadButton);
        uploadButton.setBounds(20, 0, 20, 18);
        add(jProgressBar1);
        jProgressBar1.setBounds(0, 0, 60, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void OnCompileAction(java.awt.event.ActionEvent evt)//GEN-FIRST:event_OnCompileAction
    {//GEN-HEADEREND:event_OnCompileAction
		if (!m_busy)
		{
			Thread thread = new Thread(new Runnable()
			{
				@Override
				public void run()
				{
					m_success = false;
					m_errors = 0;
					m_busy = true;
					
					setIcon(compileButton, "/com/nerduino/resources/Check16.png");
					setIcon(uploadButton, "/com/nerduino/resources/UploadUnknown16.png");
					
					Preferences.set("target", "arduino");
					
					Board board = BoardManager.Current.getBoard("Arduino Mini");
					
					Preferences.set("board", board.getShortName());
					
					m_sketch.compile((ICompileCallback) m_command);
					
					setProgress(0);
					
					if (!m_success)
					{
						setStatus("Compile Error!");
						setCompileSuccess(false);
						
						setIcon(compileButton, "/com/nerduino/resources/CheckFailed16.png");
					}
					else
					{
						setIcon(compileButton, "/com/nerduino/resources/CheckSucceed16.png");						
					}
					
					m_busy = false;
				}
			});

			thread.start();
		}
    }//GEN-LAST:event_OnCompileAction

    private void OnUploadAction(java.awt.event.ActionEvent evt)//GEN-FIRST:event_OnUploadAction
    {//GEN-HEADEREND:event_OnUploadAction
		if (!m_busy)
		{
			Thread thread = new Thread(new Runnable()
			{
				@Override
				public void run()
				{
					m_busy = true;

					InputOutput io = IOProvider.getDefault().getIO("Build", false);

					m_success = false;
					m_errors = 0;

					// loop through each nerduino associated with this sketch
					for(int i = 0; i < NerduinoManager.Current.getChildren().getNodesCount(); i++)
					{
						NerduinoBase nerduino = (NerduinoBase) NerduinoManager.Current.getChildren().getNodeAt(i);
					
						if (nerduino.getSketch().equals(m_sketch.getName()))
						{
							setIcon(compileButton, "/com/nerduino/resources/Check16.png");
							setIcon(uploadButton, "/com/nerduino/resources/UploadUnknown16.png");

							Preferences.set("target", "arduino");

							Board board = BoardManager.Current.getBoard(nerduino.getBoardType());

							Preferences.set("board", board.getShortName());

							Sketch sketch = SketchManager.Current.getSketch(nerduino.getSketch());

							sketch.compile((ICompileCallback) m_command);

							if (m_success)
							{
								setIcon(compileButton, "/com/nerduino/resources/CheckSucceed16.png");

								setProgress(0);

								io.getOut().print("Uploading to " + nerduino.getName());

								String message = nerduino.upload(sketch);				

								boolean success = (message == null);

								setCompileSuccess(success);

								if (success)
								{
									io.getOut().println(" Complete!");
									setStatus("Uploade Complete!");

									setIcon(uploadButton, "/com/nerduino/resources/UploadSucceed16.png");
								}
								else
								{
									io.getOut().println(" Failed!");
									io.getErr().println(message);

									setStatus("Uploade Failed!");

									setIcon(uploadButton, "/com/nerduino/resources/UploadFailed16.png");
								}
							}
						}
					}
					setProgress(0);
					
					m_busy = false;
				}
			});

			thread.start();
		}
    }//GEN-LAST:event_OnUploadAction

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton compileButton;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables

	@Override
	public void setProgress(int progress)
	{
		jProgressBar1.setValue(progress);
		jProgressBar1.paintImmediately(0, 0, 60, 20);
	}

	@Override
	public void setCompileSuccess(boolean success)
	{
		m_success = success;
	}
	
	void setIcon(JButton button, String path)
	{
		java.net.URL imgURL = getClass().getResource(path);
		
		if (imgURL != null)
		{
			button.setIcon(new ImageIcon(imgURL));
		}
	}

	@Override
	public void setErrorCount(int count)
	{
		m_errors = count;
	}

	@Override
	public void setStatus(String status)
	{
	}	

	@Override
	public void configure(Sketch sketch, NerduinoBase nerduino)
	{
	}

	@Override
	public void execute()
	{
	}

	@Override
	public void setSuccess(boolean success)
	{
	}

	@Override
	public boolean isSelected()
	{
		return true;
	}

	@Override
	public void reset()
	{
	}
}
