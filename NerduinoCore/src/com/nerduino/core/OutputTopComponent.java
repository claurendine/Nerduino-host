/*
 Part of the Nerduino IOT project - http://nerduino.com

 Copyright (c) 2013 Chase Laurendine

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.nerduino.core;

import java.awt.BorderLayout;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.IOContainer;
import org.openide.windows.IOContainer.CallBacks;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//com.nerduino.core//Output//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "OutputTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "com.nerduino.core.OutputTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_OutputAction",
preferredID = "OutputTopComponent")
@Messages(
{
	"CTL_OutputAction=Output",
	"CTL_OutputTopComponent=Output Window",
	"HINT_OutputTopComponent=This is a Output window"
})
public final class OutputTopComponent extends TopComponent
		implements IOContainer.Provider
{
	public static OutputTopComponent Current;
	JComponent ioComp;
	CallBacks ioCb;
	boolean activated;

	public OutputTopComponent()
	{
		Current = this;

///		initComponents();
		setLayout(new BorderLayout());
		setName(Bundle.CTL_OutputTopComponent());
		setToolTipText(Bundle.HINT_OutputTopComponent());
		putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
		putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
		putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	@Override
	public void componentOpened()
	{
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed()
	{
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p)
	{
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	void readProperties(java.util.Properties p)
	{
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	@Override
	public int getPersistenceType()
	{
		return PERSISTENCE_NEVER;
	}

	@Override
	public void open()
	{
		Mode m = WindowManager.getDefault().findMode("output");
		
		if (m != null)
			m.dockInto(this);
		
		super.open();
	}

	public void add(JComponent comp, CallBacks cb)
	{
		if (ioComp != null)
		{
			remove(ioComp);

			if (ioCb != null)
				ioCb.closed();
		}

		ioComp = comp;
		ioCb = cb;
		add(comp);
		validate();
	}

	public JComponent getSelected()
	{
		return ioComp;
	}

	public boolean isActivated()
	{
		return activated;
	}

	@Override
	protected void componentActivated()
	{
		super.componentActivated();
		activated = true;

		if (ioCb != null)
			ioCb.activated();
	}

	@Override
	protected void componentDeactivated()
	{
		super.componentDeactivated();

		activated = false;

		if (ioCb != null)
			ioCb.deactivated();
	}

	public boolean isCloseable(JComponent comp)
	{
		return false;
	}

	public void remove(JComponent comp)
	{
		if (comp == ioComp)
		{
			ioComp = null;
			ioCb = null;
		}
	}

	public void select(JComponent comp)
	{
	}

	public void setIcon(JComponent comp, Icon icon)
	{
	}

	public void setTitle(JComponent comp, String name)
	{
	}

	public void setToolTipText(JComponent comp, String text)
	{
	}

	public void setToolbarActions(JComponent comp, Action[] toolbarActions)
	{
	}
}
